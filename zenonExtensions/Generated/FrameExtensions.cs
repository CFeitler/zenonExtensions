#if EXTENDED_EXTENSIONS
//AUTOGENERATED FILE. Do not make any manual changes. Any changes to this file will be overwritten.

using Scada.AddIn.Contracts.Frame;

namespace zenonExtensions
{
  public static class FrameExtensions
  {
    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Min./Max. buttons'
    /// </summary>
    public static void SetShowMinimize(this IFrame frame, bool ShowMinimize)
    {
      frame.SetDynamicProperty("ShowMinimize",ShowMinimize);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Min./Max. buttons'
    /// </summary>
    public static bool GetShowMinimize(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("ShowMinimize");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'System menu'
    /// </summary>
    public static void SetShowSysMenu(this IFrame frame, bool ShowSysMenu)
    {
      frame.SetDynamicProperty("ShowSysMenu",ShowSysMenu);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'System menu'
    /// </summary>
    public static bool GetShowSysMenu(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("ShowSysMenu");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Title'
    /// </summary>
    public static void SetShowTitle(this IFrame frame, bool ShowTitle)
    {
      frame.SetDynamicProperty("ShowTitle",ShowTitle);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Title'
    /// </summary>
    public static bool GetShowTitle(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("ShowTitle");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property ''
    /// </summary>
    public static void SetFrameBorderStyle(this IFrame frame, long FrameBorderStyle)
    {
      frame.SetDynamicProperty("FrameBorderStyle",FrameBorderStyle);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property ''
    /// </summary>
    public static long GetFrameBorderStyle(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("FrameBorderStyle");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Border type'
    /// </summary>
    public static void SetBorderStyle(this IFrame frame, long BorderStyle)
    {
      frame.SetDynamicProperty("BorderStyle",BorderStyle);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Border' -> property 'Border type'
    /// </summary>
    public static long GetBorderStyle(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("BorderStyle");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Background graphic' -> property ''
    /// </summary>
    public static void SetBackgroundGraphicAlignment(this IFrame frame, long BackgroundGraphicAlignment)
    {
      frame.SetDynamicProperty("BackgroundGraphicAlignment",BackgroundGraphicAlignment);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Background graphic' -> property ''
    /// </summary>
    public static long GetBackgroundGraphicAlignment(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("BackgroundGraphicAlignment");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Background graphic' -> property 'Alignment'
    /// </summary>
    public static void SetBackgroundPictureStyle(this IFrame frame, long BackgroundPictureStyle)
    {
      frame.SetDynamicProperty("BackgroundPictureStyle",BackgroundPictureStyle);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Background graphic' -> property 'Alignment'
    /// </summary>
    public static long GetBackgroundPictureStyle(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("BackgroundPictureStyle");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Horizontal'
    /// </summary>
    public static void SetAltPosHorz(this IFrame frame, long AltPosHorz)
    {
      frame.SetDynamicProperty("AltPosHorz",AltPosHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Horizontal'
    /// </summary>
    public static long GetAltPosHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltPosHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Vertical offset  [pixel]'
    /// </summary>
    public static void SetPixelVert(this IFrame frame, long PixelVert)
    {
      frame.SetDynamicProperty("PixelVert",PixelVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Vertical offset  [pixel]'
    /// </summary>
    public static long GetPixelVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PixelVert");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Horizontal'
    /// </summary>
    public static void SetRefHorz(this IFrame frame, long RefHorz)
    {
      frame.SetDynamicProperty("RefHorz",RefHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Horizontal'
    /// </summary>
    public static long GetRefHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("RefHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Keep position and size on reopening'
    /// </summary>
    public static void SetNoMoveOnReopen(this IFrame frame, bool NoMoveOnReopen)
    {
      frame.SetDynamicProperty("NoMoveOnReopen",NoMoveOnReopen);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Keep position and size on reopening'
    /// </summary>
    public static bool GetNoMoveOnReopen(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("NoMoveOnReopen");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Positioning'
    /// </summary>
    public static void SetPosType(this IFrame frame, long PosType)
    {
      frame.SetDynamicProperty("PosType",PosType);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Positioning'
    /// </summary>
    public static long GetPosType(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosType");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Minimum frame margin'
    /// </summary>
    public static void SetLimitationContactPointSize(this IFrame frame, long LimitationContactPointSize)
    {
      frame.SetDynamicProperty("LimitationContactPointSize",LimitationContactPointSize);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Minimum frame margin'
    /// </summary>
    public static long GetLimitationContactPointSize(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("LimitationContactPointSize");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Move'
    /// </summary>
    public static void SetLimitationType(this IFrame frame, long LimitationType)
    {
      frame.SetDynamicProperty("LimitationType",LimitationType);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Move'
    /// </summary>
    public static long GetLimitationType(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("LimitationType");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Value (minimum)'
    /// </summary>
    public static void SetMinSizeValue(this IFrame frame, long MinSizeValue)
    {
      frame.SetDynamicProperty("MinSizeValue",MinSizeValue);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Value (minimum)'
    /// </summary>
    public static long GetMinSizeValue(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("MinSizeValue");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Limitation Minimum'
    /// </summary>
    public static void SetMinSizeType(this IFrame frame, long MinSizeType)
    {
      frame.SetDynamicProperty("MinSizeType",MinSizeType);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Limitation Minimum'
    /// </summary>
    public static long GetMinSizeType(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("MinSizeType");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Value (Opening size)'
    /// </summary>
    public static void SetOpeningSizeValue(this IFrame frame, long OpeningSizeValue)
    {
      frame.SetDynamicProperty("OpeningSizeValue",OpeningSizeValue);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Value (Opening size)'
    /// </summary>
    public static long GetOpeningSizeValue(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("OpeningSizeValue");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Horizontal offset [pixel]'
    /// </summary>
    public static void SetAltPixelHorz(this IFrame frame, long AltPixelHorz)
    {
      frame.SetDynamicProperty("AltPixelHorz",AltPixelHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Horizontal offset [pixel]'
    /// </summary>
    public static long GetAltPixelHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltPixelHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Vertical'
    /// </summary>
    public static void SetAltPosVert(this IFrame frame, long AltPosVert)
    {
      frame.SetDynamicProperty("AltPosVert",AltPosVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Vertical'
    /// </summary>
    public static long GetAltPosVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltPosVert");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Height (maximum) [pixels]'
    /// </summary>
    public static void SetPosHeight(this IFrame frame, long PosHeight)
    {
      frame.SetDynamicProperty("PosHeight",PosHeight);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Height (maximum) [pixels]'
    /// </summary>
    public static long GetPosHeight(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosHeight");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Width (maximum)  [pixels]'
    /// </summary>
    public static void SetPosWidth(this IFrame frame, long PosWidth)
    {
      frame.SetDynamicProperty("PosWidth",PosWidth);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Width (maximum)  [pixels]'
    /// </summary>
    public static long GetPosWidth(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosWidth");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Bottom [pixels]'
    /// </summary>
    public static void SetPosBottom(this IFrame frame, long PosBottom)
    {
      frame.SetDynamicProperty("PosBottom",PosBottom);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Bottom [pixels]'
    /// </summary>
    public static long GetPosBottom(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosBottom");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Right [pixels]'
    /// </summary>
    public static void SetPosRight(this IFrame frame, long PosRight)
    {
      frame.SetDynamicProperty("PosRight",PosRight);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Right [pixels]'
    /// </summary>
    public static long GetPosRight(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosRight");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Top [pixels]'
    /// </summary>
    public static void SetPosTop(this IFrame frame, long PosTop)
    {
      frame.SetDynamicProperty("PosTop",PosTop);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Top [pixels]'
    /// </summary>
    public static long GetPosTop(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosTop");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Left [pixels]'
    /// </summary>
    public static void SetPosLeft(this IFrame frame, long PosLeft)
    {
      frame.SetDynamicProperty("PosLeft",PosLeft);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Left [pixels]'
    /// </summary>
    public static long GetPosLeft(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosLeft");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Freely defineable frame shape' -> property 'Freely defineable frame shape'
    /// </summary>
    public static void SetUseFreeForming(this IFrame frame, bool UseFreeForming)
    {
      frame.SetDynamicProperty("UseFreeForming",UseFreeForming);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Freely defineable frame shape' -> property 'Freely defineable frame shape'
    /// </summary>
    public static bool GetUseFreeForming(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("UseFreeForming");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Opening size'
    /// </summary>
    public static void SetOpeningSizeType(this IFrame frame, long OpeningSizeType)
    {
      frame.SetDynamicProperty("OpeningSizeType",OpeningSizeType);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Opening size'
    /// </summary>
    public static long GetOpeningSizeType(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("OpeningSizeType");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Alternative vertical'
    /// </summary>
    public static void SetAltRefVert(this IFrame frame, long AltRefVert)
    {
      frame.SetDynamicProperty("AltRefVert",AltRefVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Alternative vertical'
    /// </summary>
    public static long GetAltRefVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltRefVert");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Smart Object'
    /// </summary>
    public static void SetSOSourceName(this IFrame frame, string SOSourceName)
    {
      frame.SetDynamicProperty("SOSourceName",SOSourceName);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Smart Object'
    /// </summary>
    public static string GetSOSourceName(this IFrame frame)
    {
    return (string) frame.GetDynamicProperty("SOSourceName");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Do not close after losing focus'
    /// </summary>
    public static void SetIgnoreCloseOnClick(this IFrame frame, bool IgnoreCloseOnClick)
    {
      frame.SetDynamicProperty("IgnoreCloseOnClick",IgnoreCloseOnClick);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Do not close after losing focus'
    /// </summary>
    public static bool GetIgnoreCloseOnClick(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("IgnoreCloseOnClick");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Horizontal'
    /// </summary>
    public static void SetPosHorz(this IFrame frame, long PosHorz)
    {
      frame.SetDynamicProperty("PosHorz",PosHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Horizontal'
    /// </summary>
    public static long GetPosHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Description'
    /// </summary>
    public static void SetDescription(this IFrame frame, string Description)
    {
      frame.SetDynamicProperty("Description",Description);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Description'
    /// </summary>
    public static string GetDescription(this IFrame frame)
    {
    return (string) frame.GetDynamicProperty("Description");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Name'
    /// </summary>
    public static void SetTemplateName(this IFrame frame, string TemplateName)
    {
      frame.SetDynamicProperty("TemplateName",TemplateName);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Name'
    /// </summary>
    public static string GetTemplateName(this IFrame frame)
    {
    return (string) frame.GetDynamicProperty("TemplateName");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Alternative horizontal'
    /// </summary>
    public static void SetAltRefHorz(this IFrame frame, long AltRefHorz)
    {
      frame.SetDynamicProperty("AltRefHorz",AltRefHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Alternative horizontal'
    /// </summary>
    public static long GetAltRefHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltRefHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Close after losing focus'
    /// </summary>
    public static void SetCloseOnClickOutside(this IFrame frame, bool CloseOnClickOutside)
    {
      frame.SetDynamicProperty("CloseOnClickOutside",CloseOnClickOutside);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Close after losing focus'
    /// </summary>
    public static bool GetCloseOnClickOutside(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("CloseOnClickOutside");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Vertical offset  [pixel]'
    /// </summary>
    public static void SetAltPixelVert(this IFrame frame, long AltPixelVert)
    {
      frame.SetDynamicProperty("AltPixelVert",AltPixelVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Alternative reference point of element' -> property 'Vertical offset  [pixel]'
    /// </summary>
    public static long GetAltPixelVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("AltPixelVert");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category '' -> property 'Window style'
    /// </summary>
    public static void SetStyle(this IFrame frame, long Style)
    {
      frame.SetDynamicProperty("Style",Style);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category '' -> property 'Window style'
    /// </summary>
    public static long GetStyle(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("Style");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Limitation'
    /// </summary>
    public static void SetLimitationArea(this IFrame frame, long LimitationArea)
    {
      frame.SetDynamicProperty("LimitationArea",LimitationArea);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Position' -> property 'Limitation'
    /// </summary>
    public static long GetLimitationArea(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("LimitationArea");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Always in the foreground'
    /// </summary>
    public static void SetShowForeground(this IFrame frame, bool ShowForeground)
    {
      frame.SetDynamicProperty("ShowForeground",ShowForeground);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Always in the foreground'
    /// </summary>
    public static bool GetShowForeground(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("ShowForeground");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Frame can be opened multiple times'
    /// </summary>
    public static void SetOpenMultiple(this IFrame frame, bool OpenMultiple)
    {
      frame.SetDynamicProperty("OpenMultiple",OpenMultiple);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'General' -> property 'Frame can be opened multiple times'
    /// </summary>
    public static bool GetOpenMultiple(this IFrame frame)
    {
    return (bool) frame.GetDynamicProperty("OpenMultiple");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Vertical'
    /// </summary>
    public static void SetRefVert(this IFrame frame, long RefVert)
    {
      frame.SetDynamicProperty("RefVert",RefVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of frame' -> property 'Vertical'
    /// </summary>
    public static long GetRefVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("RefVert");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Horizontal offset [pixel]'
    /// </summary>
    public static void SetPixelHorz(this IFrame frame, long PixelHorz)
    {
      frame.SetDynamicProperty("PixelHorz",PixelHorz);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Horizontal offset [pixel]'
    /// </summary>
    public static long GetPixelHorz(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PixelHorz");
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Vertical'
    /// </summary>
    public static void SetPosVert(this IFrame frame, long PosVert)
    {
      frame.SetDynamicProperty("PosVert",PosVert);
    }

    /// <summary>
    /// See Engineering Studio Frame properties category 'Reference point of element' -> property 'Vertical'
    /// </summary>
    public static long GetPosVert(this IFrame frame)
    {
    return (long) frame.GetDynamicProperty("PosVert");
    }

  }
}
#endif